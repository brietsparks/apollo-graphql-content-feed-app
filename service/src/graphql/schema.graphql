type Mutation {
  createUser(params: CreateUserParams!): User!
  createTag(params: CreateTagParams!): Tag!
  createPost(params: CreatePostParams!): Post!
  createImage(params: CreateImageParams!): Image!
  createPostComment(params: CreatePostCommentParams): Comment!
}

type Query {
  getUser(id: String!): User
  getUsers(pagination: CursorPaginationInput!): CursorPaginatedUsers!
  getTag(id: String!): Tag
  getTags(params: GetTagsParams): CursorPaginatedTags!
  searchTags(params: SearchTagsParams!): CursorPaginatedTags!
  getPost(id: String!): Post
  getPosts(params: GetPostsParams!): CursorPaginatedPosts!
  getImage(id: String!): Image
  getImages(params: GetImagesParams!): CursorPaginatedImages!
  getContentItems(params: GetContentItemsParams!): CursorPaginatedContentItems!
  getComment(id: String!): Comment
}
#

#
# Pagination
#
input SortInput {
  field: String!
  direction: SortDirection!
}

enum SortDirection {
  asc
  desc
}

input CursorPaginationInput {
  field: String
  sortDirection: SortDirection
  cursor: String
  limit: Int
}

type Cursors {
  start: String
  end: String
  next: String
}

input OffsetPaginationInput {
  sortField: String
  sortDirection: SortDirection
  offset: Int
  limit: Int
}

input PageOffsetPaginationInput {
  sortField: String
  sortDirection: SortDirection
  cursors: Int
  limit: Int
}

# ------------------------
# Entities
# ------------------------

#
# User
#
type User {
  id: String!
  creationTimestamp: String!
  recentPosts: [Post!]!
  recentImages: [Image!]!
  recentContentItems: [ContentItem!]!
  name: String!
}

input CreateUserParams {
  name: String!
}

type CursorPaginatedUsers {
  items: [User!]!
  cursors: Cursors!
}

type OffsetPaginatedUsers {
  items: [User!]!
}

#
# Post
#
type Post {
  id: String!
  creationTimestamp: String!
  ownerId: String!
  owner: User!
  tags: [Tag!]!
  title: String!
  body: String
}

input CreatePostParams {
  ownerId: String!
  tagIds: [String]
  title: String!
  body: String
}

input GetPostsParams {
  pagination: CursorPaginationInput!
  ownerId: String
  tagId: String
}

type CursorPaginatedPosts {
  items: [Post!]!
  cursors: Cursors!
}

#
# Image
#
type Image {
  id: String!
  creationTimestamp: String!
  ownerId: String!
  owner: User!
  tags: [Tag!]!
  url: String!
  caption: String
}

input CreateImageParams {
  ownerId: String!
  tagIds: [String]
  url: String!
  caption: String
}

input GetImagesParams {
  pagination: CursorPaginationInput!
  ownerId: String
}

type CursorPaginatedImages {
  items: [Image!]!
  cursors: Cursors!
}

#
# Content
#
union ContentItem = Post | Image

input GetContentItemsParams {
  pagination: CursorPaginationInput!
  ownerId: String
}

type CursorPaginatedContentItems {
  items: [ContentItem!]!
  cursors: Cursors!
}


#
# Tag
#
type Tag {
  id: String!
  creationTimestamp: String!
  name: String!
  recentPosts: [Post!]!
  recentImages: [Image!]!
}

type CursorPaginatedTags {
  items: [Tag!]!
  cursors: Cursors!
}

input CreateTagParams {
  name: String!
}

input GetTagsParams {
  pagination: CursorPaginationInput!
}

type CursorPaginatedTags {
  items: [Tag!]!
  cursors: Cursors!
}

input SearchTagsParams {
  pagination: CursorPaginationInput!
  term: String!
}

#
# Comment
#
type Comment {
  id: String!
  creationTimestamp: String!
  ownerId: User!
  owner: User!
  parentEntityId: String
  parentEntity: Comment
  childCommentIds: [String!]
  childComments: [Comment!]
  body: String!
}

union CommentableEntity = Comment | Post | Image

input CreatePostCommentParams {
  postId: String!
  body: String!
}
