import React, { ReactNode, useRef } from 'react';
import { ApolloClient, ApolloClientOptions, ApolloProvider as BaseApolloProvider, createHttpLink } from "@apollo/client";
import merge from 'lodash/merge';
import isEqual from 'lodash/isEqual';

import { apolloCache } from './apollo-cache';

type CacheShape = any;

export class IsomorphicApolloClient {
  apolloClient: ApolloClient<CacheShape>;

  constructor(opts: ApolloClientOptions<CacheShape>) {
    this.apolloClient = new ApolloClient<CacheShape>(opts);
  }

  hydrate(initialState: any = null) {
    const _apolloClient = this.apolloClient ?? createApolloClient()

    // If your page has Next.js data fetching methods that use Apollo Client, the initial state
    // get hydrated here
    if (initialState) {
      // Get existing cache, loaded during client side data fetching
      const existingCache = _apolloClient.extract()

      // Merge the existing cache into data passed from getStaticProps/getServerSideProps
      const data = merge(initialState, existingCache, {
        // combine arrays using object equality (like in sets)
        arrayMerge: (destinationArray, sourceArray) => [
          ...sourceArray,
          ...destinationArray.filter((d) =>
            sourceArray.every((s) => !isEqual(d, s))
          ),
        ],
      })

      // Restore the cache with the merged data
      _apolloClient.cache.restore(data)
    }
    // For SSG and SSR always create a new Apollo Client
    if (isSSR()) return _apolloClient
    // Create the Apollo Client once in the client
    if (!apolloClient) apolloClient = _apolloClient

    return _apolloClient
  }
}

let isomorphicApolloClient: IsomorphicApolloClient;

export interface GetApolloClientParams {
  url: string;
  // ssr: boolean;
}
export function getIsomorphicApolloClient(params: GetApolloClientParams) {
  const httpLink = createHttpLink({
    uri: params.url,
  });

  if (!isomorphicApolloClient) {
    isomorphicApolloClient = new IsomorphicApolloClient({
      ssrMode: isSSR(),
      cache: apolloCache,
      link: httpLink,
      defaultOptions: {
        query: {
          fetchPolicy: isSSR() ? 'no-cache' : ('cache-and-network' as any),
          errorPolicy: 'all'
        }
      }
    });
  }

  return isomorphicApolloClient;
}

function isSSR() {
  return typeof window === 'undefined';
}

export interface ApolloProviderProps {
  url: string
  children: ReactNode;
}

export function ApolloProvider({ url, children }: ApolloProviderProps) {
  const client = useRef(getIsomorphicApolloClient({ url })).current;
  return (
    <BaseApolloProvider client={client}>
      {children}
    </BaseApolloProvider>
  );
}
