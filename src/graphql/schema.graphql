type Query {
  getUser(id: String!): User
  getUsers(pagination: CursorPaginationInput!): CursorPaginatedUsers!
  getUsersByCursor(pagination: CursorPaginationInput!): CursorPaginatedUsers!
  getUsersByOffset(pagination: OffsetPaginationInput!): OffsetPaginatedUsers!
  getUsersByPageOffset(pagination: PageOffsetPaginationInput!): OffsetPaginatedUsers!
  getIssues(pagination: CursorPaginationInput!): PaginatedIssues!
}

type Mutation {
  createUser(params: CreateUserParams!): User!
  createIssue(params: CreateUserParams): Issue!
}

#
# Pagination
#
input SortInput {
  field: String!
  direction: SortDirection!
}

enum SortDirection {
  asc
  desc
}

input CursorPaginationInput {
  field: String
  sortDirection: SortDirection
  cursor: String
  limit: Int
}

type CursorPage {
  start: String
  end: String
  next: String
}

input OffsetPaginationInput {
  sortField: String
  sortDirection: SortDirection
  offset: Int
  limit: Int
}

input PageOffsetPaginationInput {
  sortField: String
  sortDirection: SortDirection
  page: Int
  limit: Int
}

#
# Entities
#
type User {
  id: String!
  creationTimestamp: String!
  name: String!
}

input CreateUserParams {
  name: String!
}

type CursorPaginatedUsers {
  items: [User!]!
  page: CursorPage!
}

type OffsetPaginatedUsers {
  items: [User!]!
}

type Issue {
  id: String!
  creationTimestamp: String!
  name: String!
}

input CreateIssueParams {
  name: String!
}

type PaginatedIssues {
  items: [Issue!]!
  page: CursorPage!
}
